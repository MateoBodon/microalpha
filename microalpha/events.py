# microalpha/events.py

from dataclasses import dataclass
from datetime import datetime


# Base class for all events, maybe useful for type hinting later
@dataclass
class Event:
    pass

@dataclass
class MarketEvent(Event):
    """
    Event to signify new market data has been received.
    For now, just a single price point.
    """
    timestamp: datetime
    symbol: str
    price: float

@dataclass
class SignalEvent(Event):
    """
    Generated by a Strategy object. The Portfolio object
    receives this and decides how to act.
    """
    timestamp: datetime
    symbol: str
    direction: str  # 'LONG' or 'SHORT'
    strength: float = 1.0 # a confidence score, maybe useful later

@dataclass
class OrderEvent(Event):
    """
    Sent by the Portfolio to the Broker. This is the actual
    request to transact.
    """
    timestamp: datetime
    symbol: str
    quantity: int
    direction: str  # 'BUY' or 'SELL'

@dataclass
class FillEvent(Event):
    """
    Sent by the Broker back to the Portfolio when an
    order has been filled. Contains the actual cost.
    """
    timestamp: datetime
    symbol: str
    quantity: int
    direction: str
    fill_cost: float
    commission: float = 0.0

class LookaheadError(Exception):
    """Custom exception for lookahead bias violations."""
    pass
